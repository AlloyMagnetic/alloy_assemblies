<?php

use \Drupal\Component\Utility\Random;
use Drupal\Core\Render\Element;
use Drupal\crop\Entity\Crop;
use Drupal\file\Entity\File;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\image\Entity\ImageStyle;

/**
 * @file
 * Contains alloy_assemblies.module.
 */

function alloy_assemblies_preprocess_assembly(&$variables) {
  $assembly = $variables['elements']['#assembly'];
  $type = $assembly->bundle();

  if ($type == 'image_billboard') {
    if ($assembly->hasField('field_image_background')) {
      $image_value = $assembly->get('field_image_background')->getValue();
      $variables['focal_point'] = FALSE;

      if ($image_value) {
        $file_id = $image_value[0]['target_id'];
        $variables['focal_point'] = alloy_assemblies_get_focal_point($assembly, $file_id);
      }
    }
  }

  if ($assembly->hasField('field_background_image')) {
    $image_value = $assembly->get('field_background_image')->getValue();
    $variables['focal_point'] = FALSE;

    if ($image_value) {
      $file_id = $image_value[0]['target_id'];
      $focal_point = alloy_assemblies_get_focal_point($assembly, $file_id);
      $uri = File::load($file_id)->getFileUri();
      $url = ImageStyle::load('billboard')->buildUrl($uri);
      $variables['attributes']->setAttribute('style', 'background-image: url(' . $url . '); background-position: ' . $focal_point['x'] . '% ' . $focal_point['y'] . '%;');
    }
  }

  if ($type == 'hubspot_cta_embed') {
    if ($embed = $assembly->get('field_embed_code')->value) {
      $variables['content']['hubspot_cta'] = [
        '#theme' => 'hubspot_cta',
      ] + alloy_assemblies_hubspot_cta_from_embed($embed);
    }

  }

  if ($type == 'hubspot_form_embed') {
    $random = new Random();
    $variables['content']['hubspot_form'] = [
      '#theme' => 'hubspot_form',
    ] + alloy_assemblies_parse_hubspot_embed($assembly->get('field_embed_code')->value);
    $variables['assembly_id'] = $assembly->get('uuid')->value;
  }

  if ($type == 'columns') {
    $columns = $assembly->get('field_column')->getValue();
    $col_count = count($columns) > 4 ? 4 : count($columns);
    $variables['column_span'] = '';
    $variables['tablet_column_span'] = '';

    if ($col_count) {
      $variables['column_span'] = 12/count($columns);
      $variables['tablet_column_span'] = $col_count > 1 ? 6 : 12;
      $variables['columns'] = [];

      foreach ($columns as $column) {
        $variables['columns'][] = ['#markup' => $column['value']];
      }
    }
  }
}

/**
 * Extract the CTA information from a HubSpot embed code.
 */
function alloy_assemblies_hubspot_cta_from_embed($embed) {
  preg_match("/hbspt.cta.load\((.*)\)/", $embed, $matches);
  if (!isset($matches[1]) || empty($matches[1])) {
    return FALSE;
  }
  $data = json_decode('[' . str_replace("'", '"', $matches[1]) . ']' );
  return array(
    '#hubspot_id' => $data[0],
    '#uuid' => $data[1],
  );
}

function alloy_assemblies_parse_hubspot_embed($embed) {
  preg_match('/portalid:\s*\'(\d+)\'/i', $embed, $portal);
  preg_match('/formid:\s*\'([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})\'/i', $embed, $formid);

  return [
    '#portalid' => isset($portal[1]) && !empty($portal[1]) ? $portal[1] : FALSE,
    '#formid' => isset($formid[1]) && !empty($formid[1]) ? $formid[1] : FALSE,
  ];
}

function alloy_assemblies_theme($existing, $type, $theme, $path) {
  $theme = [];
  $theme['hubspot_form'] = [
    'template' => 'hubspot-form',
    'variables' => [
      'portalid' => NULL,
      'formid' => NULL
    ],
  ];
  $theme['hubspot_cta'] = [
    'template' => 'hubspot-cta',
    'variables' => [
      'hubspot_id' => NULL,
      'uuid' => NULL,
    ],
  ];
  $theme['tile'] = [
    'render element' => 'elements',
    'file' => 'tile.page.inc',
    'template' => 'tile',
  ];
  $theme['logo'] = [
    'render element' => 'elements',
    'file' => 'logo.page.inc',
    'template' => 'logo',
  ];
  $theme['text_tile'] = [
    'render element' => 'elements',
    'file' => 'text_tile.page.inc',
    'template' => 'text-tile',
  ];
  return $theme;
}

function alloy_assemblies_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'alloy_assemblies');

  // Assembly types with a default template
  // defined in this module
  $types = [
    'columns',
    'call_to_action',
    'photo_gallery',
    'image_billboard',
    'video_billboard',
    'image_with_content',
    'logos',
  ];

  foreach ($types as $type) {
    if (isset($theme_registry['assembly']) && !isset($theme_registry['assembly__' . $type])) {
      $theme_registry['assembly__' . $type] = $theme_registry['assembly'];
      $theme_registry['assembly__' . $type]['template'] = 'assembly--' . str_replace('_', '-', $type);
      $theme_registry['assembly__' . $type]['theme_path'] = $path;
      $theme_registry['assembly__' . $type]['path'] = $path . '/templates';
    }
  }
}

function alloy_assemblies_get_focal_point(EntityInterface $entity, $file_id) {
  $file = File::load($file_id);

  // Get focal point
  $image = \Drupal::service('image.factory')->get($file->getFileUri());
  $width = $image->getWidth();
  $height = $image->getHeight();
  if ($file) {
    $crop_type = \Drupal::config('focal_point.settings')->get('crop_type');
    $crop = Crop::findCrop($file->getFileUri(), $crop_type);
    if ($crop) {
      $anchor = \Drupal::service('focal_point.manager')
        ->absoluteToRelative($crop->x->value, $crop->y->value, $width, $height);
      $focal_point = $anchor;
    }
  }

  return $focal_point;
}
